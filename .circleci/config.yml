version: 2.1

orbs:
  newman: postman/newman@1.0.0
  node: circleci/node@7.1

jobs:
  prepare-environment:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - run:
          name: Setup Environment Variables
          command: |
            echo "export BUILD_ID=$(date +%Y%m%d-%H%M%S)" >> $BASH_ENV
      - persist_to_workspace:
          root: .
          paths:
            - .

  build-application:
    docker:
      - image: cimg/node:16.15
    steps:
      - attach_workspace:
          at: .
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Build Application
          command: |
            echo "Building application with ID: $BUILD_ID"
            mkdir -p build
            echo "Build completed at $(date)" > build/build-info.txt
      - persist_to_workspace:
          root: .
          paths:
            - build

  api-integration-tests:
    executor: newman/postman-newman-docker
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Generate Postman API Test Collection
          command: |
            echo '{
              "info": {
                "name": "CircleCI API Demo - Basic Auth Test"
              },
              "item": [
                {
                  "name": "Verify API Authentication",
                  "request": {
                    "method": "GET",
                    "url": "https://circleci.com/api/v2/me",
                    "header": [
                      {
                        "key": "Circle-Token",
                        "value": "{{api_key_value}}"
                      }
                    ]
                  },
                  "event": [{
                    "listen": "test",
                    "script": {
                      "exec": [
                        "pm.test(\"Authentication successful\", () => {",
                        "  pm.response.to.have.status(200);",
                        "});",
                        "pm.test(\"Returns user information\", () => {",
                        "  const user = pm.response.json();",
                        "  pm.expect(user).to.have.property(\"login\");",
                        "  pm.expect(user).to.have.property(\"id\");",
                        "  console.log(\"Authenticated as: \" + user.login);",
                        "});",
                        "pm.test(\"Response time acceptable\", () => {",
                        "  pm.expect(pm.response.responseTime).to.be.below(1000);",
                        "});"
                      ]
                    }
                  }]
                }
              ]
            }' > test-collection.json
      
      - run:
          name: Create Environment Configuration
          command: |
            echo '{"values": [{"key": "api_key_value", "value": "'${CIRCLECI_API_TOKEN}'"}]}' > env.json
      
      - newman/newman-run:
          collection: test-collection.json
          environment: env.json
      
      - store_artifacts:
          path: newman
          destination: newman-reports

  deploy-staging:
    docker:
      - image: cimg/base:2022.06
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Deploy to Staging
          command: |
            echo "Deploying build $BUILD_ID to staging environment"
            echo "Deployment completed at $(date)"

  deploy-production:
    docker:
      - image: cimg/base:2022.06
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Deploy to Production
          command: |
            echo "Deploying build $BUILD_ID to production environment"
            echo "Deployment completed at $(date)"

workflows:
  build-test-deploy:
    jobs:
      - prepare-environment
      - build-application:
          requires:
            - prepare-environment
      - api-integration-tests:
          context: api-testing-demo
          requires:
            - build-application
      - deploy-staging:
          requires:
            - api-integration-tests
      - approve-production-deployment:
          type: approval
          requires:
            - deploy-staging
      - deploy-production:
          requires:
            - approve-production-deployment

  nightly-api-health-check:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only: main
    jobs:
      - api-integration-tests:
          context: api-testing-demo
